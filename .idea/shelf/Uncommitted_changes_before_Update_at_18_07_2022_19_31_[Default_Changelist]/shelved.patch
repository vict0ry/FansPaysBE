Index: routes/api/posts.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>const express = require('express');\r\nconst app = express();\r\nconst router = express.Router();\r\nconst bodyParser = require(\"body-parser\")\r\nconst User = require('../../schemas/UserSchema');\r\nconst Post = require('../../schemas/PostSchema');\r\nconst Notification = require('../../schemas/NotificationSchema');\r\nconst Comment = require('../../schemas/CommentSchema');\r\nconst jwt = require(\"jsonwebtoken\");\r\nconst multer = require(\"multer\");\r\nconst upload = multer({dest: \"uploads/\"});\r\nconst fs = require(\"fs\");\r\nconst path = require(\"path\");\r\nconst moment = require(\"moment\");\r\nconst {omit} = require(\"mongoose/lib/utils\");\r\nconst {SubscriptionHelper} = require(\"../../SubscriptionHelper\");\r\n\r\n\r\napp.use(bodyParser.urlencoded({extended: false}));\r\n\r\nrouter.get(\"/\", async (req, res, next) => {\r\n    const user = await jwt.decode(req.headers.authorization, 'secretkey');\r\n    const foundUser = await User.findOne({username: user.username});\r\n    const searchObj = req.query;\r\n\r\n    if (searchObj.search !== undefined) {\r\n        searchObj.content = {$regex: searchObj.search, $options: \"i\"};\r\n        delete searchObj.search;\r\n    }\r\n\r\n\r\n    if (searchObj.followingOnly !== undefined) {\r\n        const followingOnly = searchObj.followingOnly === \"true\";\r\n\r\n        if (followingOnly) {\r\n            const objectIds = [];\r\n\r\n            if (!foundUser.following) {\r\n                foundUser.following = [];\r\n            }\r\n\r\n            foundUser.following.forEach(user => {\r\n                objectIds.push(user);\r\n            })\r\n\r\n            objectIds.push(user._id);\r\n            searchObj.postedBy = {$in: objectIds};\r\n        }\r\n        console.log('following only true!!!');\r\n\r\n        delete searchObj.followingOnly;\r\n    }\r\n    const results = await getPosts(searchObj);\r\n    console.log('result: ', results)\r\n    res.status(200).send(results);\r\n})\r\n\r\nrouter.get('/:username', async (req, res, next) => {\r\n    const username = req.params.username;\r\n    const loggedUser = await jwt.decode(req.headers.authorization, 'secretkey');\r\n    const user = await User.findOne({username: username});\r\n    const id = user?._id;\r\n    let posts = await Post.find({postedBy: id})\r\n        .populate(\"postedBy\")\r\n        .populate({\r\n        path: 'comments',\r\n        populate: {\r\n            path: 'sender',\r\n        }\r\n    }).populate({\r\n        path: 'comments',\r\n        populate: {\r\n            path: 'comments',\r\n            populate: {\r\n                path: 'sender',\r\n            }\r\n        }\r\n    }).lean();\r\n    const subscription = await new SubscriptionHelper(loggedUser._id, id).create();\r\n    if (!subscription.isActive) {\r\n        posts = posts.map(post => {\r\n            const {pictures, comments, ...omitedPost} = post;\r\n            omitedPost['not_subscribed'] = true;\r\n            return omitedPost;\r\n        })\r\n    }\r\n\r\n    res.status(200).send(posts);\r\n})\r\n\r\n// router.get(\"/:id\", async (req, res, next) => {\r\n//\r\n//     const postId = req.params.id;\r\n//\r\n//     let postData = await getPosts({_id: postId});\r\n//     postData = postData[0];\r\n//\r\n//     const results = {\r\n//         postData: postData\r\n//     };\r\n//\r\n//     if (postData.replyTo !== undefined) {\r\n//         results.replyTo = postData.replyTo;\r\n//     }\r\n//\r\n//     results.replies = await getPosts({replyTo: postId});\r\n//\r\n//     res.status(200).send(results);\r\n// })\r\n\r\nrouter.post(\"/\", upload.array(\"images[]\"), async (req, res, next) => {\r\n    const user = await jwt.decode(req.headers.authorization, 'secretkey');\r\n    console.log('post /');\r\n    if (!req.body.content) {\r\n        console.log(\"Content param not sent with request\");\r\n        return res.sendStatus(400);\r\n    }\r\n    let filesPath = [];\r\n    if (req.files.length) {\r\n        req.files.forEach(file => {\r\n            console.log(file);\r\n            const ending = file.originalname.split('.')[1];\r\n            console.log('ending: ', ending);\r\n            const filePath = `/uploads/images/${file.filename}.` + ending;\r\n            const tempPath = file.path;\r\n            const targetPath = path.join(__dirname, `../../${filePath}`);\r\n            filesPath.push(filePath);\r\n            fs.rename(tempPath, targetPath, async error => {\r\n                if (error != null) {\r\n                    console.log(error);\r\n                    return res.sendStatus(400);\r\n                }\r\n            })\r\n        })\r\n\r\n    }\r\n\r\n    const postData = {\r\n        content: req.body.content,\r\n        postedBy: user\r\n    };\r\n\r\n    if (req.body.replyTo) {\r\n        postData.replyTo = req.body.replyTo;\r\n    }\r\n    if (filesPath.length) {\r\n        postData.pictures = filesPath;\r\n    }\r\n\r\n\r\n    Post.create(postData)\r\n        .then(async newPost => {\r\n            newPost = await User.populate(newPost, {path: \"postedBy\"})\r\n            newPost = await Post.populate(newPost, {path: \"replyTo\"})\r\n\r\n            if (newPost.replyTo !== undefined) {\r\n                await Notification.insertNotification(newPost.replyTo.postedBy, req.session.user._id, \"reply\", newPost._id);\r\n            }\r\n\r\n            res.status(201).send(newPost);\r\n        })\r\n        .catch(error => {\r\n            console.log(error);\r\n            res.sendStatus(400);\r\n        })\r\n})\r\n\r\nrouter.put(\"/:id/like\", async (req, res, next) => {\r\n    const user = await jwt.decode(req.headers.authorization, 'secretkey');\r\n    const userId = user._id;\r\n    console.log('/:id/like');\r\n\r\n    const postId = req.params.id;\r\n    const foundPost = await Post.findOne({_id: postId});\r\n    const isLiked = foundPost.likes.includes(userId);\r\n\r\n    const option = isLiked ? \"$pull\" : \"$addToSet\";\r\n\r\n    await User.findByIdAndUpdate(userId, {[option]: {likes: postId}}, {new: true})\r\n        .catch(error => {\r\n            console.log(error);\r\n            res.sendStatus(400);\r\n        })\r\n\r\n    const post = await Post.findByIdAndUpdate(postId, {[option]: {likes: user._id}}, {new: true})\r\n        .catch(error => {\r\n            console.log(error);\r\n            res.sendStatus(400);\r\n        });\r\n    if (!isLiked) {\r\n        await Notification.insertNotification(post.postedBy, userId, \"postLike\", post._id);\r\n    }\r\n\r\n\r\n    res.status(200).send(post)\r\n})\r\nrouter.put(\"/:id/comment\", async (req, res, next) => {\r\n    const user = await jwt.decode(req.headers.authorization, 'secretkey');\r\n    console.log('/id/comment');\r\n    const userId = user._id;\r\n    const postId = req.params.id;\r\n    const comment = req.body.comment;\r\n    const commentSchema = await Comment.create({\r\n        sender: userId, comment: comment, post: postId\r\n    });\r\n    const post = await Post.findByIdAndUpdate({_id: postId}, {['$addToSet']: {comments: commentSchema._id}})\r\n        .catch(error => {\r\n            console.log(error);\r\n            res.sendStatus(400);\r\n        });\r\n    const commentPopulated = await commentSchema.populate('sender').execPopulate();\r\n    console.log(commentPopulated);\r\n    res.status(200).send(commentPopulated)\r\n})\r\n\r\nrouter.delete('/:id', async (req, res, next) => {\r\n    const user = await jwt.decode(req.headers.authorization, 'secretkey');\r\n    console.log('/:id');\r\n    const postId = req.params.id;\r\n    await Post.findOneAndDelete({postedBy: user._id, _id: postId})\r\n        .then(result => {\r\n            res.status(200).send(result);\r\n        })\r\n        .catch(error => {\r\n            console.log(error);\r\n            res.sendStatus(400);\r\n        });\r\n});\r\n\r\nrouter.post('/:id/update', async (req, res, next) => {\r\n    const user = await jwt.decode(req.headers.authorization, 'secretkey');\r\n    console.log('/:id/update');\r\n    const postId = req.params.id;\r\n\r\n    await Post.findOne({postedBy: user._id, _id: postId})\r\n        .then(async result => {\r\n            result.content = req.body.content;\r\n            result.pictures = req.body.pictures;\r\n\r\n            await result.save();\r\n\r\n            res.status(200).send(result);\r\n        })\r\n        .catch(error => {\r\n            console.log(error);\r\n            res.sendStatus(400);\r\n        });\r\n});\r\n\r\nrouter.post(\"/:id/retweet\", async (req, res, next) => {\r\n    const postId = req.params.id;\r\n    const userId = req.session.user._id;\r\n\r\n    // Try and delete retweet\r\n    const deletedPost = await Post.findOneAndDelete({postedBy: userId, retweetData: postId})\r\n        .catch(error => {\r\n            console.log(error);\r\n            res.sendStatus(400);\r\n        });\r\n\r\n    var option = deletedPost != null ? \"$pull\" : \"$addToSet\";\r\n\r\n    var repost = deletedPost;\r\n\r\n    if (repost == null) {\r\n        repost = await Post.create({postedBy: userId, retweetData: postId})\r\n            .catch(error => {\r\n                console.log(error);\r\n                res.sendStatus(400);\r\n            })\r\n    }\r\n\r\n    req.session.user = await User.findByIdAndUpdate(userId, {[option]: {retweets: repost._id}}, {new: true})\r\n        .catch(error => {\r\n            console.log(error);\r\n            res.sendStatus(400);\r\n        })\r\n\r\n    const post = await Post.findByIdAndUpdate(postId, {[option]: {retweetUsers: userId}}, {new: true})\r\n        .catch(error => {\r\n            console.log(error);\r\n            res.sendStatus(400);\r\n        });\r\n\r\n    if (!deletedPost) {\r\n        await Notification.insertNotification(post.postedBy, userId, \"retweet\", post._id);\r\n    }\r\n\r\n\r\n    res.status(200).send(post)\r\n})\r\n\r\n\r\nrouter.put(\"/:id\", async (req, res, next) => {\r\n\r\n    if (req.body.pinned !== undefined) {\r\n        await Post.updateMany({postedBy: req.session.user}, {pinned: false})\r\n            .catch(error => {\r\n                console.log(error);\r\n                res.sendStatus(400);\r\n            })\r\n    }\r\n\r\n    Post.findByIdAndUpdate(req.params.id, req.body)\r\n        .then(() => res.sendStatus(204))\r\n        .catch(error => {\r\n            console.log(error);\r\n            res.sendStatus(400);\r\n        })\r\n})\r\n\r\nasync function getPosts(filter) {\r\n    let results = await Post.find(filter)\r\n        .populate(\"postedBy\")\r\n        .populate(\"retweetData\")\r\n        .populate(\"replyTo\")\r\n        .populate(\"sender\")\r\n        .populate(\"comments\")\r\n        .populate({\r\n            path: 'comments',\r\n            populate: {\r\n                path: 'sender',\r\n            }\r\n        })\r\n        .populate({\r\n            path: 'comments',\r\n            populate: {\r\n                path: 'comments',\r\n                populate: {\r\n                    path: 'sender',\r\n                }\r\n            }\r\n        })\r\n        .sort({\"createdAt\": -1})\r\n        .catch(error => console.log(error));\r\n\r\n    console.log('getposts')\r\n\r\n    results = await User.populate(results, {path: \"replyTo.postedBy\"})\r\n    return User.populate(results, {path: \"retweetData.postedBy\"});\r\n}\r\n\r\nmodule.exports = router;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/routes/api/posts.js b/routes/api/posts.js
--- a/routes/api/posts.js	(revision ba62025cb6fac9df6e7ee992c97b79dd3b525bfd)
+++ b/routes/api/posts.js	(date 1658157238216)
@@ -116,6 +116,9 @@
         return res.sendStatus(400);
     }
     let filesPath = [];
+
+    console.log(req.files)
+
     if (req.files.length) {
         req.files.forEach(file => {
             console.log(file);
@@ -124,6 +127,7 @@
             const filePath = `/uploads/images/${file.filename}.` + ending;
             const tempPath = file.path;
             const targetPath = path.join(__dirname, `../../${filePath}`);
+            console.log("target: ", filePath);
             filesPath.push(filePath);
             fs.rename(tempPath, targetPath, async error => {
                 if (error != null) {
@@ -232,10 +236,16 @@
     console.log('/:id/update');
     const postId = req.params.id;
 
+    console.log(req.body.content)
+    console.log(req.files)
+
     await Post.findOne({postedBy: user._id, _id: postId})
         .then(async result => {
             result.content = req.body.content;
-            result.pictures = req.body.pictures;
+
+            console.log(req.body.pictures)
+
+            // result.pictures = req.body.pictures;
 
             await result.save();
 
